-- FORD-FULKERSON
-- Lukas Dobis
-- xdobis01
-- FLP 2021

module FFcreateOutput (createOutputString)  where

import Data.List (intersperse, nub)

import FFdata (Node, Capacity, Flow, Path, Edge(..), FlowNet(..))
                        
-- ======================================================================
-- Transform inner represantation of flow network to String        
-- ======================================================================

-- Create output string from flowNet, based on set flags
createOutputString :: FlowNet -> [String] -> String
createOutputString flowNet args = output_string
                  where 
                    inputNetString = if (elem "-i" args) then (getInputNetString flowNet) else ""
                    maxFlowString = if (elem "-v" args) then (show $ maxFlow flowNet) else ""
                    flowNetString = if (elem "-f" args) then (getFlowNetString flowNet (head args)) else ""
                    output = filter (\string -> string /= "") [inputNetString, maxFlowString, flowNetString]
                    output_string = concat (intersperse "\n=====================================\n" output)

-- Create string from flow network
getInputNetString :: FlowNet -> String
getInputNetString flowNet = "c DIMACS input file format for maximum flow problems" ++
                            "\nc Problem line (nodes, links)" ++
                            "\np max " ++ (show $ getNodeCount flowNet) ++ " " ++ (show (length $ edges flowNet)) ++
                            "\nc source" ++
                            "\nn " ++ (show $ source flowNet) ++
                            "\nc sink" ++
                            "\nn " ++ (show $ target flowNet) ++
                            "\nc Arc descriptor lines (from, to, capacity)" ++
                            "\n" ++ (getEdgeString $ edges flowNet) ++ 
                            "\nc" ++
                            "\nc End of file"
                                
-- Get number of nodes in flow network
getNodeCount :: FlowNet -> Int 
getNodeCount flowNet = length( 
                             nub(
                                  concat(
                                         map (\edge -> [start edge, end edge]) $ edges flowNet)
                                )
                             )                                
                           
-- Create string from edges
getEdgeString :: [Edge] -> String
getEdgeString edges = concat (intersperse "\n" (map (\edge -> "a " ++ (show $ start edge)
                                                            ++ " " ++ (show $ end edge)
                                                            ++ " " ++ (show $ cap edge)
                                                    ) edges
                                               )
                             )

-- Create string from computed flow network
getFlowNetString :: FlowNet -> String -> String                          
getFlowNetString flowNet progName = "c DIMACS-format maximum flow result file" ++
                                    "\nc generated by " ++ progName ++ " executable" ++
                                    "\nc" ++
                                    "\nc Solution" ++
                                    "\ns " ++ (show $ maxFlow flowNet) ++
                                    "\nc" ++
                                    "\nc SRC DST FLOW" ++
                                    "\n" ++ (getEdgeFlowString $ edges flowNet) ++
                                    "\nc" ++
                                    "\nc End of file"

-- Create string from edges with flow
getEdgeFlowString :: [Edge] -> String
getEdgeFlowString edges = concat (intersperse "\n" (map (\edge -> "f " ++ (show $ start edge)
                                                                ++ " " ++ (show $ end edge)
                                                                ++ " " ++ (show $ flow edge)
                                                        ) edges
                                                   )
                                 )
